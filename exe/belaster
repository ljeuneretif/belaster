#!/usr/bin/env python


from belaster import __version__
from belaster.engine.application_context import ApplicationContext
from belaster.engine.application_context_binder import ApplicationContextBinder
from belaster.engine.arguments import Arguments
from belaster.engine.default_behaviour import default_help_message, error_message_missing_belaster_file, OPTIONS_BELASTER_FILE, OPTIONS_HELP, OPTIONS_VERSION, RETURN_CODE_OK, RETURN_CODE_MISSING_BELASTER_FILE
from belaster.engine.belaster_file import import_belaster_file, is_belaster_file_path
from belaster.engine.rule_applier import RuleApplier
from os import getcwd
from sys import argv



# Default behaviour of belaster
if len(argv) == 0:
	print("Missing arguments.")
	exit(RETURN_CODE_OK)



if argv[1] in OPTIONS_VERSION:
	print("version", __version__)
	exit(RETURN_CODE_OK)



belaster_script_path = getcwd()
index_start_user_args = 1
custom_path = False

if argv[1] in OPTIONS_BELASTER_FILE:
	belaster_script_path = argv[2]
	index_start_user_args = 3
	custom_path = True



if not is_belaster_file_path(belaster_script_path):
	print(error_message_missing_belaster_file(custom_path, belaster_script_path))
	exit(RETURN_CODE_MISSING_BELASTER_FILE)



if argv[1] in OPTIONS_HELP:
	# if not is_belaster_file_path(belaster_script_path):
	print(default_help_message())
	exit(RETURN_CODE_OK)



# Create application context and bind it.
context = ApplicationContext()
ApplicationContextBinder.application_context = context


# Load User's Belaster file.
# ubm is the User's Belaster Module.
# ubm loads all the symbols from Belaster through the statement `from belaster import *`.
# All the interactions with ubm happen by calling the Belaster symbols loaded in ubm.
ubm = import_belaster_file(path=belaster_script_path)


# Verify there is no loop.
context.dependency_hypergraph.build_topological_ordering_of_hyperedges()


# Parse the command-line arguments.
cli_args = Arguments()
cli_args.initialize(argv[index_start_user_args:])
cli_args.parse()

context.environment = cli_args.environment


# Apply the goals given in the command line.
rule_applier = RuleApplier()
rule_applier.initialize(cli_args.goals)
rule_applier.apply()



exit(RETURN_CODE_OK)
